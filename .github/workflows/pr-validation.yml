name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # PR size validation
  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check PR size
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const changedFiles = files.length;
            
            let size = 'small';
            let label = 'size/small';
            let color = '0e8a16';
            
            if (additions + deletions > 1000 || changedFiles > 30) {
              size = 'large';
              label = 'size/large';
              color = 'd93f0b';
            } else if (additions + deletions > 500 || changedFiles > 15) {
              size = 'medium';
              label = 'size/medium';
              color = 'fbca04';
            }
            
            // Add size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [label]
            });
            
            // Comment if PR is large
            if (size === 'large') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `⚠️ **Large PR Detected**\n\nThis PR is quite large (${additions + deletions} lines changed, ${changedFiles} files). Consider:\n\n- Breaking it into smaller, focused PRs\n- Ensuring adequate test coverage\n- Adding detailed description of changes\n- Requesting additional reviewers\n\nLarge PRs are harder to review and more likely to introduce bugs.`
              });
            }

  # PR validation checklist
  pr-checklist:
    name: PR Validation Checklist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            let issues = [];
            let warnings = [];
            
            // Check PR title
            if (pr.title.length < 10) {
              issues.push('PR title is too short (minimum 10 characters)');
            }
            
            // Check PR description
            if (!pr.body || pr.body.length < 50) {
              issues.push('PR description is missing or too short (minimum 50 characters)');
            }
            
            // Check for breaking changes
            const hasBreakingChanges = pr.title.includes('BREAKING') || 
                                     (pr.body && pr.body.includes('BREAKING'));
            
            if (hasBreakingChanges) {
              warnings.push('This PR contains breaking changes - ensure proper versioning');
            }
            
            // Check for test files
            const hasTestFiles = files.some(file => 
              file.filename.includes('.test.') || 
              file.filename.includes('.spec.') ||
              file.filename.includes('__tests__')
            );
            
            const hasSourceChanges = files.some(file => 
              file.filename.endsWith('.ts') || 
              file.filename.endsWith('.js') ||
              file.filename.endsWith('.tsx') ||
              file.filename.endsWith('.jsx')
            );
            
            if (hasSourceChanges && !hasTestFiles) {
              warnings.push('No test files found - consider adding tests for your changes');
            }
            
            // Check for documentation updates
            const hasDocChanges = files.some(file => 
              file.filename.endsWith('.md') ||
              file.filename.includes('docs/')
            );
            
            if (hasSourceChanges && !hasDocChanges && pr.additions > 100) {
              warnings.push('Consider updating documentation for significant changes');
            }
            
            // Create validation comment
            if (issues.length > 0 || warnings.length > 0) {
              let comment = '## PR Validation Results\n\n';
              
              if (issues.length > 0) {
                comment += '### ❌ Issues that need to be addressed:\n';
                issues.forEach(issue => {
                  comment += `- ${issue}\n`;
                });
                comment += '\n';
              }
              
              if (warnings.length > 0) {
                comment += '### ⚠️ Warnings:\n';
                warnings.forEach(warning => {
                  comment += `- ${warning}\n`;
                });
                comment += '\n';
              }
              
              comment += '---\n*This comment was automatically generated by the PR validation workflow.*';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
            // Fail if there are critical issues
            if (issues.length > 0) {
              core.setFailed(`PR validation failed with ${issues.length} issue(s)`);
            }

  # Auto-labeling based on changes
  auto-label:
    name: Auto-label PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Auto-label PR
        uses: actions/github-script@v6
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const labels = [];
            
            // Check file types and add appropriate labels
            const hasTypeScript = files.some(f => f.filename.endsWith('.ts') || f.filename.endsWith('.tsx'));
            const hasJavaScript = files.some(f => f.filename.endsWith('.js') || f.filename.endsWith('.jsx'));
            const hasTests = files.some(f => f.filename.includes('.test.') || f.filename.includes('.spec.'));
            const hasDocs = files.some(f => f.filename.endsWith('.md') || f.filename.includes('docs/'));
            const hasWorkflows = files.some(f => f.filename.includes('.github/workflows/'));
            const hasPackageJson = files.some(f => f.filename.includes('package.json'));
            const hasConfig = files.some(f => 
              f.filename.includes('config') || 
              f.filename.endsWith('.config.js') ||
              f.filename.endsWith('.config.ts') ||
              f.filename.endsWith('.json')
            );
            
            if (hasTypeScript) labels.push('typescript');
            if (hasJavaScript) labels.push('javascript');
            if (hasTests) labels.push('tests');
            if (hasDocs) labels.push('documentation');
            if (hasWorkflows) labels.push('ci/cd');
            if (hasPackageJson) labels.push('dependencies');
            if (hasConfig) labels.push('configuration');
            
            // Check for specific directories
            const hasExamples = files.some(f => f.filename.includes('examples/'));
            const hasPackages = files.some(f => f.filename.includes('packages/'));
            
            if (hasExamples) labels.push('examples');
            if (hasPackages) labels.push('packages');
            
            // Add labels if any were determined
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

  # Conflict detection
  conflict-check:
    name: Conflict Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for conflicts
        run: |
          git fetch origin main
          
          # Check if PR branch can be merged cleanly
          if ! git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main | grep -q "<<<<<<< "; then
            echo "✅ No merge conflicts detected"
          else
            echo "❌ Merge conflicts detected"
            echo "conflicts=true" >> $GITHUB_ENV
          fi

      - name: Comment on conflicts
        if: env.conflicts == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ **Merge Conflicts Detected**\n\nThis PR has merge conflicts with the base branch. Please resolve the conflicts and push the changes.\n\n```bash\ngit fetch origin main\ngit merge origin/main\n# Resolve conflicts\ngit commit\ngit push\n```'
            });

  # Security check for sensitive files
  security-file-check:
    name: Security File Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for sensitive files
        uses: actions/github-script@v6
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const sensitivePatterns = [
              /\.env$/,
              /\.env\./,
              /\.key$/,
              /\.pem$/,
              /\.p12$/,
              /\.pfx$/,
              /id_rsa$/,
              /id_dsa$/,
              /\.ssh/,
              /\.aws/,
              /\.docker/,
              /password/i,
              /secret/i,
              /token/i
            ];
            
            const sensitiveFiles = files.filter(file => 
              sensitivePatterns.some(pattern => pattern.test(file.filename))
            );
            
            if (sensitiveFiles.length > 0) {
              const fileList = sensitiveFiles.map(f => `- ${f.filename}`).join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🔒 **Security Warning: Sensitive Files Detected**\n\nThe following files may contain sensitive information:\n\n${fileList}\n\nPlease ensure:\n- No secrets, passwords, or API keys are committed\n- Sensitive files are added to .gitignore\n- Use environment variables or secret management for sensitive data\n\n*This is an automated security check.*`
              });
              
              // Add security review label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['security-review-needed']
              });
            }
