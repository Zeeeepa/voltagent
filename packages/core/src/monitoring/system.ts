/**
 * Main monitoring system that orchestrates all monitoring components
 */

import { CoreMonitor } from './core/monitor';
import { DashboardSystem } from './core/dashboard';
import type { MonitoringConfig, AnalyticsEvent, MetricPoint, Alert } from './types';
import { createMonitoringConfig } from './config';

/**
 * Singleton monitoring system for VoltAgent
 */
export class MonitoringSystem {
  private static instance: MonitoringSystem;
  private coreMonitor: CoreMonitor;
  private dashboardSystem: DashboardSystem;
  private isInitialized = false;
  
  private constructor(config: Partial<MonitoringConfig> = {}) {\n    const fullConfig = createMonitoringConfig(config);\n    this.coreMonitor = new CoreMonitor(fullConfig);\n    this.dashboardSystem = new DashboardSystem(fullConfig);\n    \n    // Connect core monitor events to dashboard\n    this.coreMonitor.on('metricRecorded', (metric: MetricPoint) => {\n      this.dashboardSystem.recordMetric(metric);\n    });\n    \n    this.coreMonitor.on('alertTriggered', (alert: Alert) => {\n      this.dashboardSystem.addAlert(alert);\n    });\n  }\n  \n  /**\n   * Get the singleton instance\n   */\n  static getInstance(config?: Partial<MonitoringConfig>): MonitoringSystem {\n    if (!MonitoringSystem.instance) {\n      MonitoringSystem.instance = new MonitoringSystem(config);\n    }\n    return MonitoringSystem.instance;\n  }\n  \n  /**\n   * Initialize the monitoring system\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n    \n    try {\n      console.log('[MonitoringSystem] Initializing unified monitoring system...');\n      \n      await this.coreMonitor.initialize();\n      \n      if (this.coreMonitor.getConfig().dashboardEnabled) {\n        await this.dashboardSystem.initialize();\n      }\n      \n      this.isInitialized = true;\n      console.log('[MonitoringSystem] Unified monitoring system initialized successfully');\n      \n    } catch (error) {\n      console.error('[MonitoringSystem] Failed to initialize monitoring system:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Track an analytics event\n   */\n  async trackEvent(event: AnalyticsEvent): Promise<void> {\n    if (!this.isInitialized) {\n      console.warn('[MonitoringSystem] Not initialized, skipping event tracking');\n      return;\n    }\n    \n    await this.coreMonitor.trackEvent(event);\n  }\n  \n  /**\n   * Record a metric\n   */\n  async recordMetric(metric: MetricPoint): Promise<void> {\n    if (!this.isInitialized) {\n      console.warn('[MonitoringSystem] Not initialized, skipping metric recording');\n      return;\n    }\n    \n    await this.coreMonitor.recordMetric(metric);\n  }\n  \n  /**\n   * Track agent operation with automatic metrics\n   */\n  async trackAgentOperation<T>(\n    operationId: string,\n    agentId: string,\n    operationType: string,\n    operation: () => Promise<T>,\n    metadata?: Record<string, any>\n  ): Promise<T> {\n    const startTime = Date.now();\n    \n    // Track operation start\n    await this.trackEvent({\n      id: `${operationId}-start`,\n      timestamp: new Date().toISOString(),\n      type: 'agent_operation_start',\n      agentId,\n      properties: {\n        operation_id: operationId,\n        operation_type: operationType,\n        ...metadata,\n      },\n    });\n    \n    try {\n      const result = await operation();\n      const duration = Date.now() - startTime;\n      \n      // Track successful completion\n      await this.trackEvent({\n        id: `${operationId}-complete`,\n        timestamp: new Date().toISOString(),\n        type: 'agent_operation_complete',\n        agentId,\n        properties: {\n          operation_id: operationId,\n          operation_type: operationType,\n          duration,\n          status: 'success',\n          ...metadata,\n        },\n      });\n      \n      // Record performance metrics\n      await this.recordMetric({\n        name: 'agent.operation.duration',\n        value: duration,\n        timestamp: new Date().toISOString(),\n        tags: {\n          agent_id: agentId,\n          operation_type: operationType,\n          status: 'success',\n        },\n        unit: 'milliseconds',\n      });\n      \n      return result;\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      // Track error\n      await this.trackEvent({\n        id: `${operationId}-error`,\n        timestamp: new Date().toISOString(),\n        type: 'agent_operation_error',\n        agentId,\n        properties: {\n          operation_id: operationId,\n          operation_type: operationType,\n          duration,\n          status: 'error',\n          error_message: error instanceof Error ? error.message : String(error),\n          ...metadata,\n        },\n      });\n      \n      // Record error metrics\n      await this.recordMetric({\n        name: 'agent.operation.duration',\n        value: duration,\n        timestamp: new Date().toISOString(),\n        tags: {\n          agent_id: agentId,\n          operation_type: operationType,\n          status: 'error',\n        },\n        unit: 'milliseconds',\n      });\n      \n      await this.recordMetric({\n        name: 'agent.error.count',\n        value: 1,\n        timestamp: new Date().toISOString(),\n        tags: {\n          agent_id: agentId,\n          operation_type: operationType,\n          error_type: error instanceof Error ? error.constructor.name : 'Unknown',\n        },\n      });\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Get monitoring system state\n   */\n  getState() {\n    return this.coreMonitor.getState();\n  }\n  \n  /**\n   * Get monitoring configuration\n   */\n  getConfig() {\n    return this.coreMonitor.getConfig();\n  }\n  \n  /**\n   * Get dashboard system\n   */\n  getDashboard() {\n    return this.dashboardSystem;\n  }\n  \n  /**\n   * Get core monitor\n   */\n  getCore() {\n    return this.coreMonitor;\n  }\n  \n  /**\n   * Update monitoring configuration\n   */\n  async updateConfig(newConfig: Partial<MonitoringConfig>): Promise<void> {\n    await this.coreMonitor.updateConfig(newConfig);\n  }\n  \n  /**\n   * Shutdown the monitoring system\n   */\n  async shutdown(): Promise<void> {\n    if (!this.isInitialized) {\n      return;\n    }\n    \n    console.log('[MonitoringSystem] Shutting down unified monitoring system...');\n    \n    try {\n      await Promise.all([\n        this.coreMonitor.shutdown(),\n        this.dashboardSystem.shutdown(),\n      ]);\n      \n      this.isInitialized = false;\n      console.log('[MonitoringSystem] Unified monitoring system shut down successfully');\n      \n    } catch (error) {\n      console.error('[MonitoringSystem] Error during shutdown:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Reset the singleton instance (for testing)\n   */\n  static reset(): void {\n    MonitoringSystem.instance = undefined as any;\n  }\n}\n\n// Export a default instance for convenience\nexport const monitoring = MonitoringSystem.getInstance();

