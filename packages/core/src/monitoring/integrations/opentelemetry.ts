/**
 * OpenTelemetry integration for the unified monitoring system
 */

import { monitoring } from '../system';\nimport { \n  startOperationSpan, \n  endOperationSpan, \n  startToolSpan, \n  endToolSpan \n} from '../../agent/open-telemetry';\nimport type { Span } from '@opentelemetry/api';\nimport type { EventStatus, StandardEventData } from '../../events/types';\nimport type { UsageInfo } from '../../agent/providers/base/types';\n\n/**\n * Enhanced OpenTelemetry integration that works with the unified monitoring system\n */\nexport class EnhancedOpenTelemetryIntegration {\n  /**\n   * Start an operation span with monitoring integration\n   */\n  static startOperationSpan(options: {\n    agentId: string;\n    agentName: string;\n    operationName: string;\n    userId?: string;\n    sessionId?: string;\n    parentAgentId?: string;\n    parentHistoryEntryId?: string;\n    modelName?: string;\n  }): Span {\n    // Start the OpenTelemetry span\n    const span = startOperationSpan(options);\n    \n    // Track with unified monitoring system\n    monitoring.trackEvent({\n      id: `otel-${span.spanContext().spanId}`,\n      timestamp: new Date().toISOString(),\n      type: 'otel_operation_start',\n      agentId: options.agentId,\n      userId: options.userId,\n      sessionId: options.sessionId,\n      properties: {\n        operation_name: options.operationName,\n        agent_name: options.agentName,\n        parent_agent_id: options.parentAgentId,\n        parent_history_id: options.parentHistoryEntryId,\n        model_name: options.modelName,\n        span_id: span.spanContext().spanId,\n        trace_id: span.spanContext().traceId,\n      },\n    }).catch(error => {\n      console.error('[EnhancedOTel] Failed to track operation start:', error);\n    });\n    \n    return span;\n  }\n  \n  /**\n   * End an operation span with monitoring integration\n   */\n  static async endOperationSpan(options: {\n    span: Span;\n    status: EventStatus;\n    data: Partial<StandardEventData> & Record<string, unknown>;\n    agentId?: string;\n  }): Promise<void> {\n    const { span, status, data, agentId } = options;\n    \n    try {\n      // End the OpenTelemetry span\n      endOperationSpan({ span, status, data });\n      \n      // Track with unified monitoring system\n      if (agentId) {\n        await monitoring.trackEvent({\n          id: `otel-${span.spanContext().spanId}-end`,\n          timestamp: new Date().toISOString(),\n          type: 'otel_operation_end',\n          agentId,\n          properties: {\n            status,\n            span_id: span.spanContext().spanId,\n            trace_id: span.spanContext().traceId,\n            input_size: typeof data.input === 'string' ? data.input.length : 0,\n            output_size: typeof data.output === 'string' ? data.output.length : 0,\n            error_message: data.errorMessage,\n          },\n        });\n        \n        // Record metrics\n        if (data.usage && typeof data.usage === 'object') {\n          const usage = data.usage as UsageInfo;\n          \n          if (usage.promptTokens) {\n            await monitoring.recordMetric({\n              name: 'otel.tokens.prompt',\n              value: usage.promptTokens,\n              timestamp: new Date().toISOString(),\n              tags: {\n                agent_id: agentId,\n                span_id: span.spanContext().spanId,\n                status,\n              },\n            });\n          }\n          \n          if (usage.completionTokens) {\n            await monitoring.recordMetric({\n              name: 'otel.tokens.completion',\n              value: usage.completionTokens,\n              timestamp: new Date().toISOString(),\n              tags: {\n                agent_id: agentId,\n                span_id: span.spanContext().spanId,\n                status,\n              },\n            });\n          }\n        }\n      }\n      \n    } catch (error) {\n      console.error('[EnhancedOTel] Failed to end operation span:', error);\n    }\n  }\n  \n  /**\n   * Start a tool span with monitoring integration\n   */\n  static startToolSpan(options: {\n    toolName: string;\n    toolCallId: string;\n    toolInput?: unknown;\n    agentId: string;\n    parentSpan?: Span;\n  }): Span {\n    // Start the OpenTelemetry span\n    const span = startToolSpan(options);\n    \n    // Track with unified monitoring system\n    monitoring.trackEvent({\n      id: `otel-tool-${span.spanContext().spanId}`,\n      timestamp: new Date().toISOString(),\n      type: 'otel_tool_start',\n      agentId: options.agentId,\n      properties: {\n        tool_name: options.toolName,\n        tool_call_id: options.toolCallId,\n        tool_input_size: options.toolInput ? JSON.stringify(options.toolInput).length : 0,\n        span_id: span.spanContext().spanId,\n        trace_id: span.spanContext().traceId,\n        parent_span_id: options.parentSpan?.spanContext().spanId,\n      },\n    }).catch(error => {\n      console.error('[EnhancedOTel] Failed to track tool start:', error);\n    });\n    \n    return span;\n  }\n  \n  /**\n   * End a tool span with monitoring integration\n   */\n  static async endToolSpan(options: {\n    span: Span;\n    resultData: { result?: any; content?: any; error?: any };\n    agentId?: string;\n  }): Promise<void> {\n    const { span, resultData, agentId } = options;\n    \n    try {\n      // End the OpenTelemetry span\n      endToolSpan({ span, resultData });\n      \n      // Track with unified monitoring system\n      if (agentId) {\n        const isError = Boolean(resultData.result?.error ?? resultData.error);\n        const status = isError ? 'error' : 'success';\n        \n        await monitoring.trackEvent({\n          id: `otel-tool-${span.spanContext().spanId}-end`,\n          timestamp: new Date().toISOString(),\n          type: 'otel_tool_end',\n          agentId,\n          properties: {\n            status,\n            span_id: span.spanContext().spanId,\n            trace_id: span.spanContext().traceId,\n            result_size: resultData.result ? JSON.stringify(resultData.result).length : 0,\n            error_message: resultData.error instanceof Error ? resultData.error.message : String(resultData.error || ''),\n          },\n        });\n        \n        // Record tool metrics\n        await monitoring.recordMetric({\n          name: 'otel.tool.execution',\n          value: 1,\n          timestamp: new Date().toISOString(),\n          tags: {\n            agent_id: agentId,\n            span_id: span.spanContext().spanId,\n            status,\n          },\n        });\n      }\n      \n    } catch (error) {\n      console.error('[EnhancedOTel] Failed to end tool span:', error);\n    }\n  }\n  \n  /**\n   * Create a monitoring-aware operation wrapper\n   */\n  static async withOperationSpan<T>(\n    options: {\n      agentId: string;\n      agentName: string;\n      operationName: string;\n      userId?: string;\n      sessionId?: string;\n      parentAgentId?: string;\n      parentHistoryEntryId?: string;\n      modelName?: string;\n    },\n    operation: (span: Span) => Promise<T>\n  ): Promise<T> {\n    const span = EnhancedOpenTelemetryIntegration.startOperationSpan(options);\n    \n    try {\n      const result = await operation(span);\n      \n      await EnhancedOpenTelemetryIntegration.endOperationSpan({\n        span,\n        status: 'completed',\n        data: { output: result },\n        agentId: options.agentId,\n      });\n      \n      return result;\n      \n    } catch (error) {\n      await EnhancedOpenTelemetryIntegration.endOperationSpan({\n        span,\n        status: 'error',\n        data: { \n          error,\n          errorMessage: error instanceof Error ? error.message : String(error),\n        },\n        agentId: options.agentId,\n      });\n      \n      throw error;\n    }\n  }\n  \n  /**\n   * Create a monitoring-aware tool wrapper\n   */\n  static async withToolSpan<T>(\n    options: {\n      toolName: string;\n      toolCallId: string;\n      toolInput?: unknown;\n      agentId: string;\n      parentSpan?: Span;\n    },\n    operation: (span: Span) => Promise<T>\n  ): Promise<T> {\n    const span = EnhancedOpenTelemetryIntegration.startToolSpan(options);\n    \n    try {\n      const result = await operation(span);\n      \n      await EnhancedOpenTelemetryIntegration.endToolSpan({\n        span,\n        resultData: { result },\n        agentId: options.agentId,\n      });\n      \n      return result;\n      \n    } catch (error) {\n      await EnhancedOpenTelemetryIntegration.endToolSpan({\n        span,\n        resultData: { error },\n        agentId: options.agentId,\n      });\n      \n      throw error;\n    }\n  }\n}

