version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cicd-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-codegen_db}
      POSTGRES_USER: ${DATABASE_USER:-codegen_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/comprehensive_cicd/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - cicd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-codegen_user} -d ${DATABASE_NAME:-codegen_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: cicd-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - cicd-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Main API Server
  api-server:
    build:
      context: .
      dockerfile: docker/comprehensive_cicd/Dockerfile.api-server
    container_name: cicd-api-server
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${API_PORT:-3000}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME:-codegen_db}
      - DATABASE_USER=${DATABASE_USER:-codegen_user}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - CODEGEN_API_KEY=${CODEGEN_API_KEY}
      - CODEGEN_ORG_ID=${CODEGEN_ORG_ID}
      - CODEGEN_API_URL=${CODEGEN_API_URL:-https://api.codegen.sh}
      - CODEGEN_TIMEOUT=${CODEGEN_TIMEOUT:-60000}
      - CODEGEN_MAX_RETRIES=${CODEGEN_MAX_RETRIES:-3}
      - CODEGEN_ENABLE_MOCK_MODE=${CODEGEN_ENABLE_MOCK_MODE:-false}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
    ports:
      - "${API_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cicd-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Codegen Integration Service
  codegen-integration:
    build:
      context: .
      dockerfile: docker/comprehensive_cicd/Dockerfile.codegen-integration
    container_name: cicd-codegen-integration
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME:-codegen_db}
      - DATABASE_USER=${DATABASE_USER:-codegen_user}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - CODEGEN_API_KEY=${CODEGEN_API_KEY}
      - CODEGEN_ORG_ID=${CODEGEN_ORG_ID}
      - CODEGEN_API_URL=${CODEGEN_API_URL:-https://api.codegen.sh}
      - CODEGEN_TIMEOUT=${CODEGEN_TIMEOUT:-60000}
      - CODEGEN_MAX_RETRIES=${CODEGEN_MAX_RETRIES:-3}
      - CODEGEN_ENABLE_MOCK_MODE=${CODEGEN_ENABLE_MOCK_MODE:-false}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cicd-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Workflow Orchestrator
  workflow-orchestrator:
    build:
      context: .
      dockerfile: docker/comprehensive_cicd/Dockerfile.workflow-orchestrator
    container_name: cicd-workflow-orchestrator
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME:-codegen_db}
      - DATABASE_USER=${DATABASE_USER:-codegen_user}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - MAX_CONCURRENT_WORKFLOWS=${MAX_CONCURRENT_WORKFLOWS:-5}
      - WORKFLOW_TIMEOUT=${WORKFLOW_TIMEOUT:-300000}
      - ENABLE_VALIDATION=${ENABLE_VALIDATION:-true}
      - ENABLE_NOTIFICATIONS=${ENABLE_NOTIFICATIONS:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cicd-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Metrics and Monitoring
  metrics-collector:
    build:
      context: .
      dockerfile: docker/comprehensive_cicd/Dockerfile.metrics-collector
    container_name: cicd-metrics-collector
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DATABASE_NAME:-codegen_db}
      - DATABASE_USER=${DATABASE_USER:-codegen_user}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - METRICS_PORT=${METRICS_PORT:-9090}
      - RETENTION_PERIOD=${METRICS_RETENTION_PERIOD:-604800000}
      - AGGREGATION_INTERVAL=${METRICS_AGGREGATION_INTERVAL:-60000}
    ports:
      - "${METRICS_PORT:-9090}:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cicd-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: cicd-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/comprehensive_cicd/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/comprehensive_cicd/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-server
      - metrics-collector
    networks:
      - cicd-network
    restart: unless-stopped
    profiles:
      - with-nginx

  # Prometheus for metrics collection (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cicd-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    volumes:
      - ./docker/comprehensive_cicd/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - metrics-collector
    networks:
      - cicd-network
    restart: unless-stopped
    profiles:
      - with-monitoring

  # Grafana for metrics visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cicd-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/comprehensive_cicd/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/comprehensive_cicd/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - cicd-network
    restart: unless-stopped
    profiles:
      - with-monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cicd-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

